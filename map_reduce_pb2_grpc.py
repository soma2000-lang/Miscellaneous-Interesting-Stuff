# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import map_reduce_pb2 as map__reduce__pb2


class MasterServiceStub(object):
    """The master service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendMapperData = channel.unary_unary(
                '/MasterService/SendMapperData',
                request_serializer=map__reduce__pb2.MapDataRequest.SerializeToString,
                response_deserializer=map__reduce__pb2.MapDataResponse.FromString,
                )


class MasterServiceServicer(object):
    """The master service definition.
    """

    def SendMapperData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MasterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendMapperData': grpc.unary_unary_rpc_method_handler(
                    servicer.SendMapperData,
                    request_deserializer=map__reduce__pb2.MapDataRequest.FromString,
                    response_serializer=map__reduce__pb2.MapDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MasterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MasterService(object):
    """The master service definition.
    """

    @staticmethod
    def SendMapperData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MasterService/SendMapperData',
            map__reduce__pb2.MapDataRequest.SerializeToString,
            map__reduce__pb2.MapDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class MapperServiceStub(object):
    """The mapper service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Heartbeat = channel.unary_unary(
                '/MapperService/Heartbeat',
                request_serializer=map__reduce__pb2.Empty.SerializeToString,
                response_deserializer=map__reduce__pb2.MapDataResponse.FromString,
                )
        self.Partitioning = channel.unary_unary(
                '/MapperService/Partitioning',
                request_serializer=map__reduce__pb2.Empty.SerializeToString,
                response_deserializer=map__reduce__pb2.MapDataResponse.FromString,
                )
        self.Mapping = channel.unary_unary(
                '/MapperService/Mapping',
                request_serializer=map__reduce__pb2.Empty.SerializeToString,
                response_deserializer=map__reduce__pb2.MapDataResponse.FromString,
                )
        self.GetMapperData = channel.unary_unary(
                '/MapperService/GetMapperData',
                request_serializer=map__reduce__pb2.MapDataRequest.SerializeToString,
                response_deserializer=map__reduce__pb2.MapDataResponse.FromString,
                )
        self.SendKeyValuePair = channel.unary_unary(
                '/MapperService/SendKeyValuePair',
                request_serializer=map__reduce__pb2.KeyValueRequest.SerializeToString,
                response_deserializer=map__reduce__pb2.KeyValueResponse.FromString,
                )


class MapperServiceServicer(object):
    """The mapper service definition.
    """

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Partitioning(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Mapping(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMapperData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendKeyValuePair(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MapperServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=map__reduce__pb2.Empty.FromString,
                    response_serializer=map__reduce__pb2.MapDataResponse.SerializeToString,
            ),
            'Partitioning': grpc.unary_unary_rpc_method_handler(
                    servicer.Partitioning,
                    request_deserializer=map__reduce__pb2.Empty.FromString,
                    response_serializer=map__reduce__pb2.MapDataResponse.SerializeToString,
            ),
            'Mapping': grpc.unary_unary_rpc_method_handler(
                    servicer.Mapping,
                    request_deserializer=map__reduce__pb2.Empty.FromString,
                    response_serializer=map__reduce__pb2.MapDataResponse.SerializeToString,
            ),
            'GetMapperData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMapperData,
                    request_deserializer=map__reduce__pb2.MapDataRequest.FromString,
                    response_serializer=map__reduce__pb2.MapDataResponse.SerializeToString,
            ),
            'SendKeyValuePair': grpc.unary_unary_rpc_method_handler(
                    servicer.SendKeyValuePair,
                    request_deserializer=map__reduce__pb2.KeyValueRequest.FromString,
                    response_serializer=map__reduce__pb2.KeyValueResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MapperService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MapperService(object):
    """The mapper service definition.
    """

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapperService/Heartbeat',
            map__reduce__pb2.Empty.SerializeToString,
            map__reduce__pb2.MapDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Partitioning(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapperService/Partitioning',
            map__reduce__pb2.Empty.SerializeToString,
            map__reduce__pb2.MapDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Mapping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapperService/Mapping',
            map__reduce__pb2.Empty.SerializeToString,
            map__reduce__pb2.MapDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMapperData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapperService/GetMapperData',
            map__reduce__pb2.MapDataRequest.SerializeToString,
            map__reduce__pb2.MapDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendKeyValuePair(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MapperService/SendKeyValuePair',
            map__reduce__pb2.KeyValueRequest.SerializeToString,
            map__reduce__pb2.KeyValueResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ReducerServiceStub(object):
    """The reducer service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Heartbeat = channel.unary_unary(
                '/ReducerService/Heartbeat',
                request_serializer=map__reduce__pb2.Empty.SerializeToString,
                response_deserializer=map__reduce__pb2.ReduceDataResponse.FromString,
                )
        self.Reducing = channel.unary_unary(
                '/ReducerService/Reducing',
                request_serializer=map__reduce__pb2.Empty.SerializeToString,
                response_deserializer=map__reduce__pb2.ReduceDataResponse.FromString,
                )
        self.ShuffleSorting = channel.unary_unary(
                '/ReducerService/ShuffleSorting',
                request_serializer=map__reduce__pb2.Empty.SerializeToString,
                response_deserializer=map__reduce__pb2.ReduceDataResponse.FromString,
                )
        self.GetMapperData = channel.unary_unary(
                '/ReducerService/GetMapperData',
                request_serializer=map__reduce__pb2.Empty.SerializeToString,
                response_deserializer=map__reduce__pb2.ReduceDataResponse.FromString,
                )
        self.SendNewCentroids = channel.unary_unary(
                '/ReducerService/SendNewCentroids',
                request_serializer=map__reduce__pb2.CentroidRequest.SerializeToString,
                response_deserializer=map__reduce__pb2.CentroidResponse.FromString,
                )


class ReducerServiceServicer(object):
    """The reducer service definition.
    """

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Reducing(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ShuffleSorting(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMapperData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendNewCentroids(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReducerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Heartbeat': grpc.unary_unary_rpc_method_handler(
                    servicer.Heartbeat,
                    request_deserializer=map__reduce__pb2.Empty.FromString,
                    response_serializer=map__reduce__pb2.ReduceDataResponse.SerializeToString,
            ),
            'Reducing': grpc.unary_unary_rpc_method_handler(
                    servicer.Reducing,
                    request_deserializer=map__reduce__pb2.Empty.FromString,
                    response_serializer=map__reduce__pb2.ReduceDataResponse.SerializeToString,
            ),
            'ShuffleSorting': grpc.unary_unary_rpc_method_handler(
                    servicer.ShuffleSorting,
                    request_deserializer=map__reduce__pb2.Empty.FromString,
                    response_serializer=map__reduce__pb2.ReduceDataResponse.SerializeToString,
            ),
            'GetMapperData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMapperData,
                    request_deserializer=map__reduce__pb2.Empty.FromString,
                    response_serializer=map__reduce__pb2.ReduceDataResponse.SerializeToString,
            ),
            'SendNewCentroids': grpc.unary_unary_rpc_method_handler(
                    servicer.SendNewCentroids,
                    request_deserializer=map__reduce__pb2.CentroidRequest.FromString,
                    response_serializer=map__reduce__pb2.CentroidResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ReducerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ReducerService(object):
    """The reducer service definition.
    """

    @staticmethod
    def Heartbeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReducerService/Heartbeat',
            map__reduce__pb2.Empty.SerializeToString,
            map__reduce__pb2.ReduceDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Reducing(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReducerService/Reducing',
            map__reduce__pb2.Empty.SerializeToString,
            map__reduce__pb2.ReduceDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ShuffleSorting(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReducerService/ShuffleSorting',
            map__reduce__pb2.Empty.SerializeToString,
            map__reduce__pb2.ReduceDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMapperData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReducerService/GetMapperData',
            map__reduce__pb2.Empty.SerializeToString,
            map__reduce__pb2.ReduceDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendNewCentroids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ReducerService/SendNewCentroids',
            map__reduce__pb2.CentroidRequest.SerializeToString,
            map__reduce__pb2.CentroidResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
